* 기존의 자바 서빌릇으로'만' 작업할 때의 특징
    + 자바 소스코드 실행은 자연스러움
    - html 만들려면 String 으로 "<html>" 이런거 계속 이어 붙어야 함
* 그래서 jsp'만' 작업할 때의 특징
    + html 작성은 편함. 그냥 HTML 태그, CSS 스타일, JS 문장 자연스럽게 적으면 됨(사실 내부에서 자바로 변환해서 String 붙여주기 있긴 함.)
    - 페이지의 기능이 다양해지면서 자바 로직을 수행할 일이 많아졌더니 <%~~%> 이렇게 자바 코드 들어가는게 지저분해진다.
* 한가지 요청 처리에도 [서블릿 + jsp] 세트로 항상 작업하도록!
* 하나의 요청에 두명이 세트로 일처리 해준다 -> forward, redirect
* 오후에 [서블릿 + jsp] 세트 실습, 지금은 [서블릿 + 서블릿] 세트로 forward, redirect 특징을 구현.
[ServletA 와 ServletB : forward 실습] ---- request 가 한 개, request 가 그대로 전달된다는 점!
- Servlet 자바에서 처리 완료한 데이터를 html 에 표현해야 할 때 직접하기 힘드니깐 view 담당하는 쪽으로 전달하는 용도
[ServletC 와 ServletD : redirect 실습] ---- request 가 두 개, 즉 첫번째 request 가 사라진다는 점!
- 클라이언트가 어떤 url 방문했을 때 여기말고 다른데로 유도하는 용도
- 글쓰기, 회원가입 등의 dml 요청일 때, 새로고침 해서 방금 전 보낸 request 재전송 되는 문제 해결하려고 새로운 request 생성시키는 용도.

요청 -> 응답(특별한 경우)
* html 을 안 보내는 경우
(1) redirect
(2) 쿠키 발급
(3) 파일 다운로드
(4) REST (data 응답)

**** 중요한 내용! -> 기억하기
- 서블릿은 톰캣 내부에서 동작함.
- 서블릿 객체 개발자가 new 하지 않음. 톰캣이 new
- 서블릿 객체가 해야하는 일을 코딩할 때 request, response 객체도 톰캣이 생성해서 준다는 전제하에 작성
- 주로 내가 무슨 요청을 처리해야 하는 지에 대한 정보는 rquest 요청에 거의 대부분 들어있어서 자주 사용함.
- MVC 구조에서는 요청의 응답이 대부분 html 문서(화면)임. 이럴 때는 response 건드릴 일은 없을 거다.
- 특별한 응답을 해줘야 하는 경우들이 생기는데 그 때는 response를 건드린다.
  (1) redirect (2) cookie 발급 (3) 파일 다운로드 기능 (4) data 응답(REST 서버로 가려고 함)


forward : 데이터를 전달해서 화면에 뿌릴 때 JSP 페이지 만들때 (데이터를 갖고 이동)
redirect : 사용자가 방문한 것을 보고 다른 URL 로 이동 시킬때